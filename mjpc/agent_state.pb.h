// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agent_state.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_agent_5fstate_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_agent_5fstate_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_agent_5fstate_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_agent_5fstate_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_agent_5fstate_2eproto;
namespace agent_state {
class SimState;
struct SimStateDefaultTypeInternal;
extern SimStateDefaultTypeInternal _SimState_default_instance_;
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class State_CostWeightsEntry_DoNotUse;
struct State_CostWeightsEntry_DoNotUseDefaultTypeInternal;
extern State_CostWeightsEntry_DoNotUseDefaultTypeInternal _State_CostWeightsEntry_DoNotUse_default_instance_;
class State_TaskParametersEntry_DoNotUse;
struct State_TaskParametersEntry_DoNotUseDefaultTypeInternal;
extern State_TaskParametersEntry_DoNotUseDefaultTypeInternal _State_TaskParametersEntry_DoNotUse_default_instance_;
class TaskParameterValue;
struct TaskParameterValueDefaultTypeInternal;
extern TaskParameterValueDefaultTypeInternal _TaskParameterValue_default_instance_;
}  // namespace agent_state
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace agent_state {

// ===================================================================


// -------------------------------------------------------------------

class TaskParameterValue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agent_state.TaskParameterValue) */ {
 public:
  inline TaskParameterValue() : TaskParameterValue(nullptr) {}
  ~TaskParameterValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TaskParameterValue(::google::protobuf::internal::ConstantInitialized);

  inline TaskParameterValue(const TaskParameterValue& from)
      : TaskParameterValue(nullptr, from) {}
  TaskParameterValue(TaskParameterValue&& from) noexcept
    : TaskParameterValue() {
    *this = ::std::move(from);
  }

  inline TaskParameterValue& operator=(const TaskParameterValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskParameterValue& operator=(TaskParameterValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskParameterValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kNumeric = 1,
    kSelection = 2,
    VALUE_NOT_SET = 0,
  };

  static inline const TaskParameterValue* internal_default_instance() {
    return reinterpret_cast<const TaskParameterValue*>(
               &_TaskParameterValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskParameterValue& a, TaskParameterValue& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskParameterValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskParameterValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskParameterValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskParameterValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TaskParameterValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TaskParameterValue& from) {
    TaskParameterValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TaskParameterValue* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "agent_state.TaskParameterValue";
  }
  protected:
  explicit TaskParameterValue(::google::protobuf::Arena* arena);
  TaskParameterValue(::google::protobuf::Arena* arena, const TaskParameterValue& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumericFieldNumber = 1,
    kSelectionFieldNumber = 2,
  };
  // double numeric = 1;
  bool has_numeric() const;
  void clear_numeric() ;
  double numeric() const;
  void set_numeric(double value);

  private:
  double _internal_numeric() const;
  void _internal_set_numeric(double value);

  public:
  // string selection = 2;
  bool has_selection() const;
  void clear_selection() ;
  const std::string& selection() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_selection(Arg_&& arg, Args_... args);
  std::string* mutable_selection();
  PROTOBUF_NODISCARD std::string* release_selection();
  void set_allocated_selection(std::string* value);

  private:
  const std::string& _internal_selection() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_selection(
      const std::string& value);
  std::string* _internal_mutable_selection();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:agent_state.TaskParameterValue)
 private:
  class _Internal;
  void set_has_numeric();
  void set_has_selection();

  inline bool has_value() const;
  inline void clear_has_value();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 0,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      double numeric_;
      ::google::protobuf::internal::ArenaStringPtr selection_;
    } value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agent_5fstate_2eproto;
};// -------------------------------------------------------------------

class State_CostWeightsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          State_CostWeightsEntry_DoNotUse, std::string, double,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      State_CostWeightsEntry_DoNotUse, std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>;
  State_CostWeightsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR State_CostWeightsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit State_CostWeightsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const State_CostWeightsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const State_CostWeightsEntry_DoNotUse*>(
        &_State_CostWeightsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "agent_state.State.CostWeightsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agent_5fstate_2eproto;
};
// -------------------------------------------------------------------

class SimState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agent_state.SimState) */ {
 public:
  inline SimState() : SimState(nullptr) {}
  ~SimState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SimState(::google::protobuf::internal::ConstantInitialized);

  inline SimState(const SimState& from)
      : SimState(nullptr, from) {}
  SimState(SimState&& from) noexcept
    : SimState() {
    *this = ::std::move(from);
  }

  inline SimState& operator=(const SimState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimState& operator=(SimState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimState* internal_default_instance() {
    return reinterpret_cast<const SimState*>(
               &_SimState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimState& a, SimState& b) {
    a.Swap(&b);
  }
  inline void Swap(SimState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SimState& from) {
    SimState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SimState* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "agent_state.SimState";
  }
  protected:
  explicit SimState(::google::protobuf::Arena* arena);
  SimState(::google::protobuf::Arena* arena, const SimState& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQposFieldNumber = 2,
    kQvelFieldNumber = 3,
    kActFieldNumber = 4,
    kMocapPosFieldNumber = 5,
    kMocapQuatFieldNumber = 6,
    kUserdataFieldNumber = 7,
    kTimeFieldNumber = 1,
  };
  // repeated double qpos = 2 [packed = true];
  int qpos_size() const;
  private:
  int _internal_qpos_size() const;

  public:
  void clear_qpos() ;
  double qpos(int index) const;
  void set_qpos(int index, double value);
  void add_qpos(double value);
  const ::google::protobuf::RepeatedField<double>& qpos() const;
  ::google::protobuf::RepeatedField<double>* mutable_qpos();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_qpos() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_qpos();

  public:
  // repeated double qvel = 3 [packed = true];
  int qvel_size() const;
  private:
  int _internal_qvel_size() const;

  public:
  void clear_qvel() ;
  double qvel(int index) const;
  void set_qvel(int index, double value);
  void add_qvel(double value);
  const ::google::protobuf::RepeatedField<double>& qvel() const;
  ::google::protobuf::RepeatedField<double>* mutable_qvel();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_qvel() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_qvel();

  public:
  // repeated double act = 4 [packed = true];
  int act_size() const;
  private:
  int _internal_act_size() const;

  public:
  void clear_act() ;
  double act(int index) const;
  void set_act(int index, double value);
  void add_act(double value);
  const ::google::protobuf::RepeatedField<double>& act() const;
  ::google::protobuf::RepeatedField<double>* mutable_act();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_act() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_act();

  public:
  // repeated double mocap_pos = 5 [packed = true];
  int mocap_pos_size() const;
  private:
  int _internal_mocap_pos_size() const;

  public:
  void clear_mocap_pos() ;
  double mocap_pos(int index) const;
  void set_mocap_pos(int index, double value);
  void add_mocap_pos(double value);
  const ::google::protobuf::RepeatedField<double>& mocap_pos() const;
  ::google::protobuf::RepeatedField<double>* mutable_mocap_pos();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_mocap_pos() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_mocap_pos();

  public:
  // repeated double mocap_quat = 6 [packed = true];
  int mocap_quat_size() const;
  private:
  int _internal_mocap_quat_size() const;

  public:
  void clear_mocap_quat() ;
  double mocap_quat(int index) const;
  void set_mocap_quat(int index, double value);
  void add_mocap_quat(double value);
  const ::google::protobuf::RepeatedField<double>& mocap_quat() const;
  ::google::protobuf::RepeatedField<double>* mutable_mocap_quat();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_mocap_quat() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_mocap_quat();

  public:
  // repeated double userdata = 7 [packed = true];
  int userdata_size() const;
  private:
  int _internal_userdata_size() const;

  public:
  void clear_userdata() ;
  double userdata(int index) const;
  void set_userdata(int index, double value);
  void add_userdata(double value);
  const ::google::protobuf::RepeatedField<double>& userdata() const;
  ::google::protobuf::RepeatedField<double>* mutable_userdata();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_userdata() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_userdata();

  public:
  // optional double time = 1;
  bool has_time() const;
  void clear_time() ;
  double time() const;
  void set_time(double value);

  private:
  double _internal_time() const;
  void _internal_set_time(double value);

  public:
  // @@protoc_insertion_point(class_scope:agent_state.SimState)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<double> qpos_;
    ::google::protobuf::RepeatedField<double> qvel_;
    ::google::protobuf::RepeatedField<double> act_;
    ::google::protobuf::RepeatedField<double> mocap_pos_;
    ::google::protobuf::RepeatedField<double> mocap_quat_;
    ::google::protobuf::RepeatedField<double> userdata_;
    double time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agent_5fstate_2eproto;
};// -------------------------------------------------------------------

class State_TaskParametersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          State_TaskParametersEntry_DoNotUse, std::string, ::agent_state::TaskParameterValue,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      State_TaskParametersEntry_DoNotUse, std::string, ::agent_state::TaskParameterValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  State_TaskParametersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR State_TaskParametersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit State_TaskParametersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const State_TaskParametersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const State_TaskParametersEntry_DoNotUse*>(
        &_State_TaskParametersEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "agent_state.State.TaskParametersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_agent_5fstate_2eproto;
};
// -------------------------------------------------------------------

class State final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agent_state.State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR State(::google::protobuf::internal::ConstantInitialized);

  inline State(const State& from)
      : State(nullptr, from) {}
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  State* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<State>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const State& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const State& from) {
    State::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(State* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "agent_state.State";
  }
  protected:
  explicit State(::google::protobuf::Arena* arena);
  State(::google::protobuf::Arena* arena, const State& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTaskParametersFieldNumber = 2,
    kCostWeightsFieldNumber = 3,
    kSimStateFieldNumber = 1,
  };
  // map<string, .agent_state.TaskParameterValue> task_parameters = 2;
  int task_parameters_size() const;
  private:
  int _internal_task_parameters_size() const;

  public:
  void clear_task_parameters() ;
  const ::google::protobuf::Map<std::string, ::agent_state::TaskParameterValue>& task_parameters() const;
  ::google::protobuf::Map<std::string, ::agent_state::TaskParameterValue>* mutable_task_parameters();

  private:
  const ::google::protobuf::Map<std::string, ::agent_state::TaskParameterValue>& _internal_task_parameters() const;
  ::google::protobuf::Map<std::string, ::agent_state::TaskParameterValue>* _internal_mutable_task_parameters();

  public:
  // map<string, double> cost_weights = 3;
  int cost_weights_size() const;
  private:
  int _internal_cost_weights_size() const;

  public:
  void clear_cost_weights() ;
  const ::google::protobuf::Map<std::string, double>& cost_weights() const;
  ::google::protobuf::Map<std::string, double>* mutable_cost_weights();

  private:
  const ::google::protobuf::Map<std::string, double>& _internal_cost_weights() const;
  ::google::protobuf::Map<std::string, double>* _internal_mutable_cost_weights();

  public:
  // .agent_state.SimState sim_state = 1;
  bool has_sim_state() const;
  void clear_sim_state() ;
  const ::agent_state::SimState& sim_state() const;
  PROTOBUF_NODISCARD ::agent_state::SimState* release_sim_state();
  ::agent_state::SimState* mutable_sim_state();
  void set_allocated_sim_state(::agent_state::SimState* value);
  void unsafe_arena_set_allocated_sim_state(::agent_state::SimState* value);
  ::agent_state::SimState* unsafe_arena_release_sim_state();

  private:
  const ::agent_state::SimState& _internal_sim_state() const;
  ::agent_state::SimState* _internal_mutable_sim_state();

  public:
  // @@protoc_insertion_point(class_scope:agent_state.State)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 4,
      53, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<State_TaskParametersEntry_DoNotUse, std::string, ::agent_state::TaskParameterValue,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        task_parameters_;
    ::google::protobuf::internal::MapField<State_CostWeightsEntry_DoNotUse, std::string, double,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>
        cost_weights_;
    ::agent_state::SimState* sim_state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agent_5fstate_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SimState

// optional double time = 1;
inline bool SimState::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SimState::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double SimState::time() const {
  // @@protoc_insertion_point(field_get:agent_state.SimState.time)
  return _internal_time();
}
inline void SimState::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:agent_state.SimState.time)
}
inline double SimState::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_;
}
inline void SimState::_internal_set_time(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_ = value;
}

// repeated double qpos = 2 [packed = true];
inline int SimState::_internal_qpos_size() const {
  return _internal_qpos().size();
}
inline int SimState::qpos_size() const {
  return _internal_qpos_size();
}
inline void SimState::clear_qpos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.qpos_.Clear();
}
inline double SimState::qpos(int index) const {
  // @@protoc_insertion_point(field_get:agent_state.SimState.qpos)
  return _internal_qpos().Get(index);
}
inline void SimState::set_qpos(int index, double value) {
  _internal_mutable_qpos()->Set(index, value);
  // @@protoc_insertion_point(field_set:agent_state.SimState.qpos)
}
inline void SimState::add_qpos(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_qpos()->Add(value);
  // @@protoc_insertion_point(field_add:agent_state.SimState.qpos)
}
inline const ::google::protobuf::RepeatedField<double>& SimState::qpos() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:agent_state.SimState.qpos)
  return _internal_qpos();
}
inline ::google::protobuf::RepeatedField<double>* SimState::mutable_qpos()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:agent_state.SimState.qpos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_qpos();
}
inline const ::google::protobuf::RepeatedField<double>& SimState::_internal_qpos()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qpos_;
}
inline ::google::protobuf::RepeatedField<double>* SimState::_internal_mutable_qpos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.qpos_;
}

// repeated double qvel = 3 [packed = true];
inline int SimState::_internal_qvel_size() const {
  return _internal_qvel().size();
}
inline int SimState::qvel_size() const {
  return _internal_qvel_size();
}
inline void SimState::clear_qvel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.qvel_.Clear();
}
inline double SimState::qvel(int index) const {
  // @@protoc_insertion_point(field_get:agent_state.SimState.qvel)
  return _internal_qvel().Get(index);
}
inline void SimState::set_qvel(int index, double value) {
  _internal_mutable_qvel()->Set(index, value);
  // @@protoc_insertion_point(field_set:agent_state.SimState.qvel)
}
inline void SimState::add_qvel(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_qvel()->Add(value);
  // @@protoc_insertion_point(field_add:agent_state.SimState.qvel)
}
inline const ::google::protobuf::RepeatedField<double>& SimState::qvel() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:agent_state.SimState.qvel)
  return _internal_qvel();
}
inline ::google::protobuf::RepeatedField<double>* SimState::mutable_qvel()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:agent_state.SimState.qvel)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_qvel();
}
inline const ::google::protobuf::RepeatedField<double>& SimState::_internal_qvel()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.qvel_;
}
inline ::google::protobuf::RepeatedField<double>* SimState::_internal_mutable_qvel() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.qvel_;
}

// repeated double act = 4 [packed = true];
inline int SimState::_internal_act_size() const {
  return _internal_act().size();
}
inline int SimState::act_size() const {
  return _internal_act_size();
}
inline void SimState::clear_act() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.act_.Clear();
}
inline double SimState::act(int index) const {
  // @@protoc_insertion_point(field_get:agent_state.SimState.act)
  return _internal_act().Get(index);
}
inline void SimState::set_act(int index, double value) {
  _internal_mutable_act()->Set(index, value);
  // @@protoc_insertion_point(field_set:agent_state.SimState.act)
}
inline void SimState::add_act(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_act()->Add(value);
  // @@protoc_insertion_point(field_add:agent_state.SimState.act)
}
inline const ::google::protobuf::RepeatedField<double>& SimState::act() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:agent_state.SimState.act)
  return _internal_act();
}
inline ::google::protobuf::RepeatedField<double>* SimState::mutable_act()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:agent_state.SimState.act)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_act();
}
inline const ::google::protobuf::RepeatedField<double>& SimState::_internal_act()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.act_;
}
inline ::google::protobuf::RepeatedField<double>* SimState::_internal_mutable_act() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.act_;
}

// repeated double mocap_pos = 5 [packed = true];
inline int SimState::_internal_mocap_pos_size() const {
  return _internal_mocap_pos().size();
}
inline int SimState::mocap_pos_size() const {
  return _internal_mocap_pos_size();
}
inline void SimState::clear_mocap_pos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mocap_pos_.Clear();
}
inline double SimState::mocap_pos(int index) const {
  // @@protoc_insertion_point(field_get:agent_state.SimState.mocap_pos)
  return _internal_mocap_pos().Get(index);
}
inline void SimState::set_mocap_pos(int index, double value) {
  _internal_mutable_mocap_pos()->Set(index, value);
  // @@protoc_insertion_point(field_set:agent_state.SimState.mocap_pos)
}
inline void SimState::add_mocap_pos(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_mocap_pos()->Add(value);
  // @@protoc_insertion_point(field_add:agent_state.SimState.mocap_pos)
}
inline const ::google::protobuf::RepeatedField<double>& SimState::mocap_pos() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:agent_state.SimState.mocap_pos)
  return _internal_mocap_pos();
}
inline ::google::protobuf::RepeatedField<double>* SimState::mutable_mocap_pos()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:agent_state.SimState.mocap_pos)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_mocap_pos();
}
inline const ::google::protobuf::RepeatedField<double>& SimState::_internal_mocap_pos()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mocap_pos_;
}
inline ::google::protobuf::RepeatedField<double>* SimState::_internal_mutable_mocap_pos() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.mocap_pos_;
}

// repeated double mocap_quat = 6 [packed = true];
inline int SimState::_internal_mocap_quat_size() const {
  return _internal_mocap_quat().size();
}
inline int SimState::mocap_quat_size() const {
  return _internal_mocap_quat_size();
}
inline void SimState::clear_mocap_quat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mocap_quat_.Clear();
}
inline double SimState::mocap_quat(int index) const {
  // @@protoc_insertion_point(field_get:agent_state.SimState.mocap_quat)
  return _internal_mocap_quat().Get(index);
}
inline void SimState::set_mocap_quat(int index, double value) {
  _internal_mutable_mocap_quat()->Set(index, value);
  // @@protoc_insertion_point(field_set:agent_state.SimState.mocap_quat)
}
inline void SimState::add_mocap_quat(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_mocap_quat()->Add(value);
  // @@protoc_insertion_point(field_add:agent_state.SimState.mocap_quat)
}
inline const ::google::protobuf::RepeatedField<double>& SimState::mocap_quat() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:agent_state.SimState.mocap_quat)
  return _internal_mocap_quat();
}
inline ::google::protobuf::RepeatedField<double>* SimState::mutable_mocap_quat()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:agent_state.SimState.mocap_quat)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_mocap_quat();
}
inline const ::google::protobuf::RepeatedField<double>& SimState::_internal_mocap_quat()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mocap_quat_;
}
inline ::google::protobuf::RepeatedField<double>* SimState::_internal_mutable_mocap_quat() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.mocap_quat_;
}

// repeated double userdata = 7 [packed = true];
inline int SimState::_internal_userdata_size() const {
  return _internal_userdata().size();
}
inline int SimState::userdata_size() const {
  return _internal_userdata_size();
}
inline void SimState::clear_userdata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userdata_.Clear();
}
inline double SimState::userdata(int index) const {
  // @@protoc_insertion_point(field_get:agent_state.SimState.userdata)
  return _internal_userdata().Get(index);
}
inline void SimState::set_userdata(int index, double value) {
  _internal_mutable_userdata()->Set(index, value);
  // @@protoc_insertion_point(field_set:agent_state.SimState.userdata)
}
inline void SimState::add_userdata(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_userdata()->Add(value);
  // @@protoc_insertion_point(field_add:agent_state.SimState.userdata)
}
inline const ::google::protobuf::RepeatedField<double>& SimState::userdata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:agent_state.SimState.userdata)
  return _internal_userdata();
}
inline ::google::protobuf::RepeatedField<double>* SimState::mutable_userdata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:agent_state.SimState.userdata)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_userdata();
}
inline const ::google::protobuf::RepeatedField<double>& SimState::_internal_userdata()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userdata_;
}
inline ::google::protobuf::RepeatedField<double>* SimState::_internal_mutable_userdata() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.userdata_;
}

// -------------------------------------------------------------------

// TaskParameterValue

// double numeric = 1;
inline bool TaskParameterValue::has_numeric() const {
  return value_case() == kNumeric;
}
inline void TaskParameterValue::set_has_numeric() {
  _impl_._oneof_case_[0] = kNumeric;
}
inline void TaskParameterValue::clear_numeric() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kNumeric) {
    _impl_.value_.numeric_ = 0;
    clear_has_value();
  }
}
inline double TaskParameterValue::numeric() const {
  // @@protoc_insertion_point(field_get:agent_state.TaskParameterValue.numeric)
  return _internal_numeric();
}
inline void TaskParameterValue::set_numeric(double value) {
  _internal_set_numeric(value);
  // @@protoc_insertion_point(field_set:agent_state.TaskParameterValue.numeric)
}
inline double TaskParameterValue::_internal_numeric() const {
  if (value_case() == kNumeric) {
    return _impl_.value_.numeric_;
  }
  return 0;
}
inline void TaskParameterValue::_internal_set_numeric(double value) {
  if (value_case() != kNumeric) {
    clear_value();
    set_has_numeric();
  }
  _impl_.value_.numeric_ = value;
}

// string selection = 2;
inline bool TaskParameterValue::has_selection() const {
  return value_case() == kSelection;
}
inline void TaskParameterValue::set_has_selection() {
  _impl_._oneof_case_[0] = kSelection;
}
inline void TaskParameterValue::clear_selection() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kSelection) {
    _impl_.value_.selection_.Destroy();
    clear_has_value();
  }
}
inline const std::string& TaskParameterValue::selection() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:agent_state.TaskParameterValue.selection)
  return _internal_selection();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TaskParameterValue::set_selection(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() != kSelection) {
    clear_value();

    set_has_selection();
    _impl_.value_.selection_.InitDefault();
  }
  _impl_.value_.selection_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:agent_state.TaskParameterValue.selection)
}
inline std::string* TaskParameterValue::mutable_selection() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:agent_state.TaskParameterValue.selection)
  return _s;
}
inline const std::string& TaskParameterValue::_internal_selection() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (value_case() != kSelection) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.selection_.Get();
}
inline void TaskParameterValue::_internal_set_selection(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() != kSelection) {
    clear_value();

    set_has_selection();
    _impl_.value_.selection_.InitDefault();
  }
  _impl_.value_.selection_.Set(value, GetArena());
}
inline std::string* TaskParameterValue::_internal_mutable_selection() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() != kSelection) {
    clear_value();

    set_has_selection();
    _impl_.value_.selection_.InitDefault();
  }
  return _impl_.value_.selection_.Mutable( GetArena());
}
inline std::string* TaskParameterValue::release_selection() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:agent_state.TaskParameterValue.selection)
  if (value_case() != kSelection) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.selection_.Release();
}
inline void TaskParameterValue::set_allocated_selection(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_selection();
    _impl_.value_.selection_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:agent_state.TaskParameterValue.selection)
}

inline bool TaskParameterValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TaskParameterValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline TaskParameterValue::ValueCase TaskParameterValue::value_case() const {
  return TaskParameterValue::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// State

// .agent_state.SimState sim_state = 1;
inline bool State::has_sim_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sim_state_ != nullptr);
  return value;
}
inline void State::clear_sim_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.sim_state_ != nullptr) _impl_.sim_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::agent_state::SimState& State::_internal_sim_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::agent_state::SimState* p = _impl_.sim_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::agent_state::SimState&>(::agent_state::_SimState_default_instance_);
}
inline const ::agent_state::SimState& State::sim_state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:agent_state.State.sim_state)
  return _internal_sim_state();
}
inline void State::unsafe_arena_set_allocated_sim_state(::agent_state::SimState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sim_state_);
  }
  _impl_.sim_state_ = reinterpret_cast<::agent_state::SimState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agent_state.State.sim_state)
}
inline ::agent_state::SimState* State::release_sim_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::agent_state::SimState* released = _impl_.sim_state_;
  _impl_.sim_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::agent_state::SimState* State::unsafe_arena_release_sim_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:agent_state.State.sim_state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::agent_state::SimState* temp = _impl_.sim_state_;
  _impl_.sim_state_ = nullptr;
  return temp;
}
inline ::agent_state::SimState* State::_internal_mutable_sim_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sim_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::agent_state::SimState>(GetArena());
    _impl_.sim_state_ = reinterpret_cast<::agent_state::SimState*>(p);
  }
  return _impl_.sim_state_;
}
inline ::agent_state::SimState* State::mutable_sim_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::agent_state::SimState* _msg = _internal_mutable_sim_state();
  // @@protoc_insertion_point(field_mutable:agent_state.State.sim_state)
  return _msg;
}
inline void State::set_allocated_sim_state(::agent_state::SimState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::agent_state::SimState*>(_impl_.sim_state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::agent_state::SimState*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.sim_state_ = reinterpret_cast<::agent_state::SimState*>(value);
  // @@protoc_insertion_point(field_set_allocated:agent_state.State.sim_state)
}

// map<string, .agent_state.TaskParameterValue> task_parameters = 2;
inline int State::_internal_task_parameters_size() const {
  return _internal_task_parameters().size();
}
inline int State::task_parameters_size() const {
  return _internal_task_parameters_size();
}
inline void State::clear_task_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.task_parameters_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::agent_state::TaskParameterValue>& State::_internal_task_parameters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.task_parameters_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::agent_state::TaskParameterValue>& State::task_parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:agent_state.State.task_parameters)
  return _internal_task_parameters();
}
inline ::google::protobuf::Map<std::string, ::agent_state::TaskParameterValue>* State::_internal_mutable_task_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.task_parameters_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::agent_state::TaskParameterValue>* State::mutable_task_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:agent_state.State.task_parameters)
  return _internal_mutable_task_parameters();
}

// map<string, double> cost_weights = 3;
inline int State::_internal_cost_weights_size() const {
  return _internal_cost_weights().size();
}
inline int State::cost_weights_size() const {
  return _internal_cost_weights_size();
}
inline void State::clear_cost_weights() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cost_weights_.Clear();
}
inline const ::google::protobuf::Map<std::string, double>& State::_internal_cost_weights() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cost_weights_.GetMap();
}
inline const ::google::protobuf::Map<std::string, double>& State::cost_weights() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:agent_state.State.cost_weights)
  return _internal_cost_weights();
}
inline ::google::protobuf::Map<std::string, double>* State::_internal_mutable_cost_weights() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.cost_weights_.MutableMap();
}
inline ::google::protobuf::Map<std::string, double>* State::mutable_cost_weights() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:agent_state.State.cost_weights)
  return _internal_mutable_cost_weights();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace agent_state


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_agent_5fstate_2eproto_2epb_2eh
