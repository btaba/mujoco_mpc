name: build

on:
  push:
    branches: [main, deepmind, proto]
  pull_request:
    branches: [main]

jobs:
  mujoco_mpc:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            additional_label: "with Clang 12"
            cmake_args: >-
              -G Ninja
              -DCMAKE_C_COMPILER:STRING=clang-12
              -DCMAKE_CXX_COMPILER:STRING=clang++-12
              -DMJPC_BUILD_GRPC_SERVICE:BOOL=ON
            additional_targets: "agent_server direct_server filter_server"
            tmpdir: "/tmp"
          - os: macos-13
            cmake_args: >-
              -G Ninja
              -DMJPC_BUILD_GRPC_SERVICE:BOOL=ON
            additional_targets: "agent_server direct_server filter_server"
            tmpdir: "/tmp"

    name: "MuJoCo MPC on ${{ matrix.os }} ${{ matrix.additional_label }}"
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    # # workaround for broken clang on ubuntu runner until https://github.com/actions/runner-images/issues/8659 get fixed
    # - uses: mjp41/workaround8649@7929373c0fe5caf844d8115adccef39e3b5362e7
    #   with:
    #     os: ${{ matrix.os }}
    - name: Prepare Linux
      if: ${{ runner.os == 'Linux' }}
      run: >
        sudo apt-get update && sudo apt-get install
        curl
        libgl1-mesa-dev
        libxinerama-dev
        libxcursor-dev
        libxrandr-dev
        libxi-dev
        ninja-build
        unzip &&
        PB_REL="https://github.com/protocolbuffers/protobuf/releases" &&
        curl -LO $PB_REL/download/v21.12/protoc-21.12-linux-x86_64.zip &&
        unzip protoc-21.12-linux-x86_64.zip bin/protoc -d /usr/local &&
        curl -LO https://github.com/protocolbuffers/protobuf/archive/refs/tags/v21.12.tar.gz &&
        tar -xvzf v21.12.tar.gz &&

    # protobuf-compiler=3.12.*
    # curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor >bazel-archive-keyring.gpg &&
    # sudo mv bazel-archive-keyring.gpg /usr/share/keyrings &&
    # echo "deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list &&
    # sudo apt update && sudo apt install bazel &&
    # curl -LO https://github.com/protocolbuffers/protobuf/archive/refs/tags/v25.1.tar.gz &&
    # tar -xvzf  v25.1.tar.gz &&
    # cd protobuf-25.1 &&
    # bazel build :protoc :protobuf &&
    # cp bazel-bin/protoc /usr/local/bin

    # - name: "[Ubuntu] Remove GCC 13 from runner image"
    #   # https://github.com/actions/runner-images/issues/8659
    #   if: (inputs.os == 'ubuntu-latest') || (inputs.os == 'ubuntu-22.04') || (inputs.os == 'default')
    #   shell: bash
    #   run: |
    #     echo "Runs on: ${{ inputs.os }}"
    #     sudo rm -f /etc/apt/sources.list.d/ubuntu-toolchain-r-ubuntu-test-jammy.list
    #     sudo apt-get update
    #     sudo apt-get install -y --allow-downgrades libc6=2.35-0ubuntu3.4 libc6-dev=2.35-0ubuntu3.4 libstdc++6=12.3.0-1ubuntu1~22.04 libgcc-s1=12.3.0-1ubuntu1~22.04
    - name: Prepare macOS
      if: ${{ runner.os == 'macOS' }}
      run: brew install ninja protobuf
    - name: Protoc version
      run: protoc --version
    - name: Protoc include dir
      run: ls -al /usr/include/google/protobuf
    - name: Protoc list
      run: sudo apt list -a protobuf-compiler
    - name: Prepare Windows
      if: ${{ runner.os == 'Windows' }}
      # Install llvm 16 manually, remove after
      # https://github.com/actions/runner-images/issues/8125 is resolved and that
      # version is included in the image by default
      run: >
        choco install nasm
        choco upgrade llvm
    - name: For the deepmind branch, use MuJoCo HEAD rather than a fixed commit
      if: ${{ github.ref_name == 'deepmind' }}
      run:
        echo "cmake_extra_args=-DMUJOCO_MPC_MUJOCO_GIT_TAG:STRING=main" > "$GITHUB_ENV"
    - name: Configure MuJoCo MPC
      shell: bash
      run: >
        mkdir build &&
        cd build &&
        cmake .. -DCMAKE_BUILD_TYPE:STRING=Release
        ${{ matrix.cmake_args }}
        $cmake_extra_args
    - name: Build MuJoCo MPC
      working-directory: build
      run: cmake --build . --config=Release ${{ matrix.cmake_build_args }} --target mjpc agent_test cost_derivatives_test norm_test rollout_test threadpool_test trajectory_test utilities_test direct_force_test direct_optimize_test direct_parameter_test direct_sensor_test direct_trajectory_test direct_utilities_test batch_filter_test batch_prior_test kalman_test unscented_test ${{ matrix.additional_targets }}
    - name: Test MuJoCo MPC
      working-directory: build
      run: ctest -C Release --output-on-failure .
    - name: Notify team chat
      shell: bash
      env:
        GCHAT_API: ${{ secrets.GCHAT_API }}
        JOB_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/\
          ${{ github.run_id }}"
      if: ${{ failure() && github.event_name == 'push' && env.GCHAT_API != '' }}
      run: >
        curl
        "$GCHAT_API&threadKey=$GITHUB_SHA&messageReplyOption=REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD"
        -X POST
        -H "Content-Type: application/json"
        -d "{
        'text': '<$JOB_URL|*FAILURE*>:
        job \`${{ matrix.os }}${{ matrix.additional_label }}\`
        commit \`$(echo $GITHUB_SHA | head -c6)\`\n
        \`\`\`Author: ${{ github.event.head_commit.author.name }}
        <${{ github.event.head_commit.author.email }}>
        \n\n${{ github.event.head_commit.message }}\`\`\`
        '}"
